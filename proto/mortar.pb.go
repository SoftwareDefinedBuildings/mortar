// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mortar.proto

package mortarpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AggFunc int32

const (
	AggFunc_AGG_FUNC_INVALID AggFunc = 0
	AggFunc_AGG_FUNC_RAW     AggFunc = 1
	AggFunc_AGG_FUNC_MEAN    AggFunc = 2
	AggFunc_AGG_FUNC_MIN     AggFunc = 3
	AggFunc_AGG_FUNC_MAX     AggFunc = 4
	AggFunc_AGG_FUNC_COUNT   AggFunc = 5
	AggFunc_AGG_FUNC_SUM     AggFunc = 6
)

var AggFunc_name = map[int32]string{
	0: "AGG_FUNC_INVALID",
	1: "AGG_FUNC_RAW",
	2: "AGG_FUNC_MEAN",
	3: "AGG_FUNC_MIN",
	4: "AGG_FUNC_MAX",
	5: "AGG_FUNC_COUNT",
	6: "AGG_FUNC_SUM",
}
var AggFunc_value = map[string]int32{
	"AGG_FUNC_INVALID": 0,
	"AGG_FUNC_RAW":     1,
	"AGG_FUNC_MEAN":    2,
	"AGG_FUNC_MIN":     3,
	"AGG_FUNC_MAX":     4,
	"AGG_FUNC_COUNT":   5,
	"AGG_FUNC_SUM":     6,
}

func (x AggFunc) String() string {
	return proto.EnumName(AggFunc_name, int32(x))
}
func (AggFunc) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_mortar_d0aecb9bfb7bd84c, []int{0}
}

type GetAPIKeyRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Refreshtoken         string   `protobuf:"bytes,3,opt,name=refreshtoken,proto3" json:"refreshtoken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAPIKeyRequest) Reset()         { *m = GetAPIKeyRequest{} }
func (m *GetAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GetAPIKeyRequest) ProtoMessage()    {}
func (*GetAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_mortar_d0aecb9bfb7bd84c, []int{0}
}
func (m *GetAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAPIKeyRequest.Unmarshal(m, b)
}
func (m *GetAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAPIKeyRequest.Marshal(b, m, deterministic)
}
func (dst *GetAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAPIKeyRequest.Merge(dst, src)
}
func (m *GetAPIKeyRequest) XXX_Size() int {
	return xxx_messageInfo_GetAPIKeyRequest.Size(m)
}
func (m *GetAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAPIKeyRequest proto.InternalMessageInfo

func (m *GetAPIKeyRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetAPIKeyRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *GetAPIKeyRequest) GetRefreshtoken() string {
	if m != nil {
		return m.Refreshtoken
	}
	return ""
}

type APIKeyResponse struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Refreshtoken         string   `protobuf:"bytes,2,opt,name=refreshtoken,proto3" json:"refreshtoken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *APIKeyResponse) Reset()         { *m = APIKeyResponse{} }
func (m *APIKeyResponse) String() string { return proto.CompactTextString(m) }
func (*APIKeyResponse) ProtoMessage()    {}
func (*APIKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_mortar_d0aecb9bfb7bd84c, []int{1}
}
func (m *APIKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_APIKeyResponse.Unmarshal(m, b)
}
func (m *APIKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_APIKeyResponse.Marshal(b, m, deterministic)
}
func (dst *APIKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIKeyResponse.Merge(dst, src)
}
func (m *APIKeyResponse) XXX_Size() int {
	return xxx_messageInfo_APIKeyResponse.Size(m)
}
func (m *APIKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_APIKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_APIKeyResponse proto.InternalMessageInfo

func (m *APIKeyResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *APIKeyResponse) GetRefreshtoken() string {
	if m != nil {
		return m.Refreshtoken
	}
	return ""
}

type QualifyRequest struct {
	// all of these queries must return a response for the site to be considered
	// qualified
	Required []string `protobuf:"bytes,1,rep,name=required,proto3" json:"required,omitempty"`
	// only one of these needs to return a response for the site to be
	// considered qualified
	Optional             []string `protobuf:"bytes,2,rep,name=optional,proto3" json:"optional,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QualifyRequest) Reset()         { *m = QualifyRequest{} }
func (m *QualifyRequest) String() string { return proto.CompactTextString(m) }
func (*QualifyRequest) ProtoMessage()    {}
func (*QualifyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_mortar_d0aecb9bfb7bd84c, []int{2}
}
func (m *QualifyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QualifyRequest.Unmarshal(m, b)
}
func (m *QualifyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QualifyRequest.Marshal(b, m, deterministic)
}
func (dst *QualifyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QualifyRequest.Merge(dst, src)
}
func (m *QualifyRequest) XXX_Size() int {
	return xxx_messageInfo_QualifyRequest.Size(m)
}
func (m *QualifyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QualifyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QualifyRequest proto.InternalMessageInfo

func (m *QualifyRequest) GetRequired() []string {
	if m != nil {
		return m.Required
	}
	return nil
}

func (m *QualifyRequest) GetOptional() []string {
	if m != nil {
		return m.Optional
	}
	return nil
}

type QualifyResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// list of sitenames
	Sites                []string `protobuf:"bytes,2,rep,name=sites,proto3" json:"sites,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QualifyResponse) Reset()         { *m = QualifyResponse{} }
func (m *QualifyResponse) String() string { return proto.CompactTextString(m) }
func (*QualifyResponse) ProtoMessage()    {}
func (*QualifyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_mortar_d0aecb9bfb7bd84c, []int{3}
}
func (m *QualifyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QualifyResponse.Unmarshal(m, b)
}
func (m *QualifyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QualifyResponse.Marshal(b, m, deterministic)
}
func (dst *QualifyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QualifyResponse.Merge(dst, src)
}
func (m *QualifyResponse) XXX_Size() int {
	return xxx_messageInfo_QualifyResponse.Size(m)
}
func (m *QualifyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QualifyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QualifyResponse proto.InternalMessageInfo

func (m *QualifyResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *QualifyResponse) GetSites() []string {
	if m != nil {
		return m.Sites
	}
	return nil
}

type FetchRequest struct {
	// the list of sites to execute against
	Sites []string `protobuf:"bytes,1,rep,name=sites,proto3" json:"sites,omitempty"`
	// list of streams to download
	Streams []*Stream `protobuf:"bytes,2,rep,name=streams,proto3" json:"streams,omitempty"`
	// temporal parameters for all streams
	// (range of data to download, resolution)
	Time                 *TimeParams  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Views                []*View      `protobuf:"bytes,4,rep,name=views,proto3" json:"views,omitempty"`
	DataFrames           []*DataFrame `protobuf:"bytes,5,rep,name=dataFrames,proto3" json:"dataFrames,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FetchRequest) Reset()         { *m = FetchRequest{} }
func (m *FetchRequest) String() string { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()    {}
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_mortar_d0aecb9bfb7bd84c, []int{4}
}
func (m *FetchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchRequest.Unmarshal(m, b)
}
func (m *FetchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchRequest.Marshal(b, m, deterministic)
}
func (dst *FetchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchRequest.Merge(dst, src)
}
func (m *FetchRequest) XXX_Size() int {
	return xxx_messageInfo_FetchRequest.Size(m)
}
func (m *FetchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchRequest proto.InternalMessageInfo

func (m *FetchRequest) GetSites() []string {
	if m != nil {
		return m.Sites
	}
	return nil
}

func (m *FetchRequest) GetStreams() []*Stream {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (m *FetchRequest) GetTime() *TimeParams {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *FetchRequest) GetViews() []*View {
	if m != nil {
		return m.Views
	}
	return nil
}

func (m *FetchRequest) GetDataFrames() []*DataFrame {
	if m != nil {
		return m.DataFrames
	}
	return nil
}

type Stream struct {
	// name of the stream
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Brick query (alternative)
	Definition string   `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	DataVars   []string `protobuf:"bytes,6,rep,name=dataVars,proto3" json:"dataVars,omitempty"`
	// list of stream UUIDs
	Uuids []string `protobuf:"bytes,3,rep,name=uuids,proto3" json:"uuids,omitempty"`
	// aggregation function for this stream
	Aggregation AggFunc `protobuf:"varint,4,opt,name=aggregation,proto3,enum=mortar.AggFunc" json:"aggregation,omitempty"`
	// engineering units to convert the stream to
	Units                string   `protobuf:"bytes,5,opt,name=units,proto3" json:"units,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stream) Reset()         { *m = Stream{} }
func (m *Stream) String() string { return proto.CompactTextString(m) }
func (*Stream) ProtoMessage()    {}
func (*Stream) Descriptor() ([]byte, []int) {
	return fileDescriptor_mortar_d0aecb9bfb7bd84c, []int{5}
}
func (m *Stream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stream.Unmarshal(m, b)
}
func (m *Stream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stream.Marshal(b, m, deterministic)
}
func (dst *Stream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stream.Merge(dst, src)
}
func (m *Stream) XXX_Size() int {
	return xxx_messageInfo_Stream.Size(m)
}
func (m *Stream) XXX_DiscardUnknown() {
	xxx_messageInfo_Stream.DiscardUnknown(m)
}

var xxx_messageInfo_Stream proto.InternalMessageInfo

func (m *Stream) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Stream) GetDefinition() string {
	if m != nil {
		return m.Definition
	}
	return ""
}

func (m *Stream) GetDataVars() []string {
	if m != nil {
		return m.DataVars
	}
	return nil
}

func (m *Stream) GetUuids() []string {
	if m != nil {
		return m.Uuids
	}
	return nil
}

func (m *Stream) GetAggregation() AggFunc {
	if m != nil {
		return m.Aggregation
	}
	return AggFunc_AGG_FUNC_INVALID
}

func (m *Stream) GetUnits() string {
	if m != nil {
		return m.Units
	}
	return ""
}

type FetchResponse struct {
	// error from backend
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// stream definition fields:
	// - site name
	// - view name
	// - data frame name
	// - variable name (from View definition)
	Site      string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
	View      string `protobuf:"bytes,9,opt,name=view,proto3" json:"view,omitempty"`
	DataFrame string `protobuf:"bytes,10,opt,name=dataFrame,proto3" json:"dataFrame,omitempty"`
	Variable  string `protobuf:"bytes,3,opt,name=variable,proto3" json:"variable,omitempty"`
	// uuid
	Identifier string `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// timestamps and value should have same length
	Times  []int64   `protobuf:"varint,5,rep,packed,name=times,proto3" json:"times,omitempty"`
	Values []float64 `protobuf:"fixed64,6,rep,packed,name=values,proto3" json:"values,omitempty"`
	// brick query contents related to this variable
	Variables            []string `protobuf:"bytes,7,rep,name=variables,proto3" json:"variables,omitempty"`
	Rows                 []*Row   `protobuf:"bytes,8,rep,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchResponse) Reset()         { *m = FetchResponse{} }
func (m *FetchResponse) String() string { return proto.CompactTextString(m) }
func (*FetchResponse) ProtoMessage()    {}
func (*FetchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_mortar_d0aecb9bfb7bd84c, []int{6}
}
func (m *FetchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchResponse.Unmarshal(m, b)
}
func (m *FetchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchResponse.Marshal(b, m, deterministic)
}
func (dst *FetchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchResponse.Merge(dst, src)
}
func (m *FetchResponse) XXX_Size() int {
	return xxx_messageInfo_FetchResponse.Size(m)
}
func (m *FetchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchResponse proto.InternalMessageInfo

func (m *FetchResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *FetchResponse) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func (m *FetchResponse) GetView() string {
	if m != nil {
		return m.View
	}
	return ""
}

func (m *FetchResponse) GetDataFrame() string {
	if m != nil {
		return m.DataFrame
	}
	return ""
}

func (m *FetchResponse) GetVariable() string {
	if m != nil {
		return m.Variable
	}
	return ""
}

func (m *FetchResponse) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *FetchResponse) GetTimes() []int64 {
	if m != nil {
		return m.Times
	}
	return nil
}

func (m *FetchResponse) GetValues() []float64 {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *FetchResponse) GetVariables() []string {
	if m != nil {
		return m.Variables
	}
	return nil
}

func (m *FetchResponse) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

type Row struct {
	Values               []*URI   `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_mortar_d0aecb9bfb7bd84c, []int{7}
}
func (m *Row) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Row.Unmarshal(m, b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Row.Marshal(b, m, deterministic)
}
func (dst *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(dst, src)
}
func (m *Row) XXX_Size() int {
	return xxx_messageInfo_Row.Size(m)
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetValues() []*URI {
	if m != nil {
		return m.Values
	}
	return nil
}

type URI struct {
	// full URI
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *URI) Reset()         { *m = URI{} }
func (m *URI) String() string { return proto.CompactTextString(m) }
func (*URI) ProtoMessage()    {}
func (*URI) Descriptor() ([]byte, []int) {
	return fileDescriptor_mortar_d0aecb9bfb7bd84c, []int{8}
}
func (m *URI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_URI.Unmarshal(m, b)
}
func (m *URI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_URI.Marshal(b, m, deterministic)
}
func (dst *URI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URI.Merge(dst, src)
}
func (m *URI) XXX_Size() int {
	return xxx_messageInfo_URI.Size(m)
}
func (m *URI) XXX_DiscardUnknown() {
	xxx_messageInfo_URI.DiscardUnknown(m)
}

var xxx_messageInfo_URI proto.InternalMessageInfo

func (m *URI) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *URI) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TimeParams struct {
	Start                string   `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  string   `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	Window               string   `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	Aligned              bool     `protobuf:"varint,4,opt,name=aligned,proto3" json:"aligned,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeParams) Reset()         { *m = TimeParams{} }
func (m *TimeParams) String() string { return proto.CompactTextString(m) }
func (*TimeParams) ProtoMessage()    {}
func (*TimeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_mortar_d0aecb9bfb7bd84c, []int{9}
}
func (m *TimeParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeParams.Unmarshal(m, b)
}
func (m *TimeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeParams.Marshal(b, m, deterministic)
}
func (dst *TimeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeParams.Merge(dst, src)
}
func (m *TimeParams) XXX_Size() int {
	return xxx_messageInfo_TimeParams.Size(m)
}
func (m *TimeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeParams.DiscardUnknown(m)
}

var xxx_messageInfo_TimeParams proto.InternalMessageInfo

func (m *TimeParams) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *TimeParams) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *TimeParams) GetWindow() string {
	if m != nil {
		return m.Window
	}
	return ""
}

func (m *TimeParams) GetAligned() bool {
	if m != nil {
		return m.Aligned
	}
	return false
}

type View struct {
	// name of the View
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// sites included in this View
	Sites []string `protobuf:"bytes,2,rep,name=sites,proto3" json:"sites,omitempty"`
	// brick query definition
	Definition           string   `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *View) Reset()         { *m = View{} }
func (m *View) String() string { return proto.CompactTextString(m) }
func (*View) ProtoMessage()    {}
func (*View) Descriptor() ([]byte, []int) {
	return fileDescriptor_mortar_d0aecb9bfb7bd84c, []int{10}
}
func (m *View) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_View.Unmarshal(m, b)
}
func (m *View) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_View.Marshal(b, m, deterministic)
}
func (dst *View) XXX_Merge(src proto.Message) {
	xxx_messageInfo_View.Merge(dst, src)
}
func (m *View) XXX_Size() int {
	return xxx_messageInfo_View.Size(m)
}
func (m *View) XXX_DiscardUnknown() {
	xxx_messageInfo_View.DiscardUnknown(m)
}

var xxx_messageInfo_View proto.InternalMessageInfo

func (m *View) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *View) GetSites() []string {
	if m != nil {
		return m.Sites
	}
	return nil
}

func (m *View) GetDefinition() string {
	if m != nil {
		return m.Definition
	}
	return ""
}

type DataFrame struct {
	// name of the streams
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// aggregation function
	Aggregation AggFunc `protobuf:"varint,2,opt,name=aggregation,proto3,enum=mortar.AggFunc" json:"aggregation,omitempty"`
	// window argument for aggregation
	Window string `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	// engineering units
	Unit string `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	// refer to variables in Views
	Timeseries []*Timeseries `protobuf:"bytes,5,rep,name=timeseries,proto3" json:"timeseries,omitempty"`
	// instead of vars in views, list the UUIDs explicitly.
	Uuids                []string `protobuf:"bytes,6,rep,name=uuids,proto3" json:"uuids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataFrame) Reset()         { *m = DataFrame{} }
func (m *DataFrame) String() string { return proto.CompactTextString(m) }
func (*DataFrame) ProtoMessage()    {}
func (*DataFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_mortar_d0aecb9bfb7bd84c, []int{11}
}
func (m *DataFrame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataFrame.Unmarshal(m, b)
}
func (m *DataFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataFrame.Marshal(b, m, deterministic)
}
func (dst *DataFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataFrame.Merge(dst, src)
}
func (m *DataFrame) XXX_Size() int {
	return xxx_messageInfo_DataFrame.Size(m)
}
func (m *DataFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_DataFrame.DiscardUnknown(m)
}

var xxx_messageInfo_DataFrame proto.InternalMessageInfo

func (m *DataFrame) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataFrame) GetAggregation() AggFunc {
	if m != nil {
		return m.Aggregation
	}
	return AggFunc_AGG_FUNC_INVALID
}

func (m *DataFrame) GetWindow() string {
	if m != nil {
		return m.Window
	}
	return ""
}

func (m *DataFrame) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *DataFrame) GetTimeseries() []*Timeseries {
	if m != nil {
		return m.Timeseries
	}
	return nil
}

func (m *DataFrame) GetUuids() []string {
	if m != nil {
		return m.Uuids
	}
	return nil
}

type Timeseries struct {
	// name of the View
	View string `protobuf:"bytes,1,opt,name=view,proto3" json:"view,omitempty"`
	// list of variables from the view that
	// we want to get data for
	DataVars             []string `protobuf:"bytes,2,rep,name=dataVars,proto3" json:"dataVars,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timeseries) Reset()         { *m = Timeseries{} }
func (m *Timeseries) String() string { return proto.CompactTextString(m) }
func (*Timeseries) ProtoMessage()    {}
func (*Timeseries) Descriptor() ([]byte, []int) {
	return fileDescriptor_mortar_d0aecb9bfb7bd84c, []int{12}
}
func (m *Timeseries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timeseries.Unmarshal(m, b)
}
func (m *Timeseries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timeseries.Marshal(b, m, deterministic)
}
func (dst *Timeseries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timeseries.Merge(dst, src)
}
func (m *Timeseries) XXX_Size() int {
	return xxx_messageInfo_Timeseries.Size(m)
}
func (m *Timeseries) XXX_DiscardUnknown() {
	xxx_messageInfo_Timeseries.DiscardUnknown(m)
}

var xxx_messageInfo_Timeseries proto.InternalMessageInfo

func (m *Timeseries) GetView() string {
	if m != nil {
		return m.View
	}
	return ""
}

func (m *Timeseries) GetDataVars() []string {
	if m != nil {
		return m.DataVars
	}
	return nil
}

func init() {
	proto.RegisterType((*GetAPIKeyRequest)(nil), "mortar.GetAPIKeyRequest")
	proto.RegisterType((*APIKeyResponse)(nil), "mortar.APIKeyResponse")
	proto.RegisterType((*QualifyRequest)(nil), "mortar.QualifyRequest")
	proto.RegisterType((*QualifyResponse)(nil), "mortar.QualifyResponse")
	proto.RegisterType((*FetchRequest)(nil), "mortar.FetchRequest")
	proto.RegisterType((*Stream)(nil), "mortar.Stream")
	proto.RegisterType((*FetchResponse)(nil), "mortar.FetchResponse")
	proto.RegisterType((*Row)(nil), "mortar.Row")
	proto.RegisterType((*URI)(nil), "mortar.URI")
	proto.RegisterType((*TimeParams)(nil), "mortar.TimeParams")
	proto.RegisterType((*View)(nil), "mortar.View")
	proto.RegisterType((*DataFrame)(nil), "mortar.DataFrame")
	proto.RegisterType((*Timeseries)(nil), "mortar.Timeseries")
	proto.RegisterEnum("mortar.AggFunc", AggFunc_name, AggFunc_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MortarClient is the client API for Mortar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MortarClient interface {
	GetAPIKey(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*APIKeyResponse, error)
	// identify which sites meet the requirements of the queries
	Qualify(ctx context.Context, in *QualifyRequest, opts ...grpc.CallOption) (*QualifyResponse, error)
	// pull data from Mortar
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (Mortar_FetchClient, error)
}

type mortarClient struct {
	cc *grpc.ClientConn
}

func NewMortarClient(cc *grpc.ClientConn) MortarClient {
	return &mortarClient{cc}
}

func (c *mortarClient) GetAPIKey(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*APIKeyResponse, error) {
	out := new(APIKeyResponse)
	err := c.cc.Invoke(ctx, "/mortar.Mortar/GetAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mortarClient) Qualify(ctx context.Context, in *QualifyRequest, opts ...grpc.CallOption) (*QualifyResponse, error) {
	out := new(QualifyResponse)
	err := c.cc.Invoke(ctx, "/mortar.Mortar/Qualify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mortarClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (Mortar_FetchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Mortar_serviceDesc.Streams[0], "/mortar.Mortar/Fetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &mortarFetchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mortar_FetchClient interface {
	Recv() (*FetchResponse, error)
	grpc.ClientStream
}

type mortarFetchClient struct {
	grpc.ClientStream
}

func (x *mortarFetchClient) Recv() (*FetchResponse, error) {
	m := new(FetchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MortarServer is the server API for Mortar service.
type MortarServer interface {
	GetAPIKey(context.Context, *GetAPIKeyRequest) (*APIKeyResponse, error)
	// identify which sites meet the requirements of the queries
	Qualify(context.Context, *QualifyRequest) (*QualifyResponse, error)
	// pull data from Mortar
	Fetch(*FetchRequest, Mortar_FetchServer) error
}

func RegisterMortarServer(s *grpc.Server, srv MortarServer) {
	s.RegisterService(&_Mortar_serviceDesc, srv)
}

func _Mortar_GetAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MortarServer).GetAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mortar.Mortar/GetAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MortarServer).GetAPIKey(ctx, req.(*GetAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mortar_Qualify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QualifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MortarServer).Qualify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mortar.Mortar/Qualify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MortarServer).Qualify(ctx, req.(*QualifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mortar_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MortarServer).Fetch(m, &mortarFetchServer{stream})
}

type Mortar_FetchServer interface {
	Send(*FetchResponse) error
	grpc.ServerStream
}

type mortarFetchServer struct {
	grpc.ServerStream
}

func (x *mortarFetchServer) Send(m *FetchResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Mortar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mortar.Mortar",
	HandlerType: (*MortarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIKey",
			Handler:    _Mortar_GetAPIKey_Handler,
		},
		{
			MethodName: "Qualify",
			Handler:    _Mortar_Qualify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _Mortar_Fetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mortar.proto",
}

func init() { proto.RegisterFile("mortar.proto", fileDescriptor_mortar_d0aecb9bfb7bd84c) }

var fileDescriptor_mortar_d0aecb9bfb7bd84c = []byte{
	// 838 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xc1, 0x6e, 0xeb, 0x44,
	0x14, 0xc5, 0xb1, 0xe3, 0x24, 0x37, 0x69, 0xea, 0x8e, 0x4a, 0xb1, 0x22, 0x04, 0x95, 0x91, 0x50,
	0xd5, 0x45, 0x45, 0x83, 0x84, 0x04, 0xa2, 0x8b, 0xd0, 0x92, 0x12, 0x20, 0xa1, 0x4c, 0x9b, 0x82,
	0xd8, 0x54, 0xd3, 0x7a, 0x92, 0x8e, 0x48, 0xec, 0x74, 0xc6, 0xae, 0xc5, 0x4f, 0xb0, 0xe2, 0x5f,
	0x58, 0xbc, 0x1f, 0x78, 0x9b, 0xf7, 0x4f, 0x4f, 0x33, 0xe3, 0x71, 0xec, 0x34, 0xef, 0xe9, 0xed,
	0x7c, 0xce, 0x3d, 0xbe, 0xbe, 0x73, 0xee, 0xbd, 0x1e, 0xe8, 0x2c, 0x63, 0x9e, 0x10, 0x7e, 0xb2,
	0xe2, 0x71, 0x12, 0x23, 0x57, 0xa3, 0x20, 0x02, 0xef, 0x92, 0x26, 0x83, 0xab, 0xd1, 0x2f, 0xf4,
	0x1f, 0x4c, 0x9f, 0x52, 0x2a, 0x12, 0xd4, 0x83, 0x66, 0x2a, 0x28, 0x8f, 0xc8, 0x92, 0xfa, 0xd6,
	0xa1, 0x75, 0xd4, 0xc2, 0x05, 0x96, 0xb1, 0x15, 0x11, 0x22, 0x8b, 0x79, 0xe8, 0xd7, 0x74, 0xcc,
	0x60, 0x14, 0x40, 0x87, 0xd3, 0x19, 0xa7, 0xe2, 0x31, 0x89, 0xff, 0xa6, 0x91, 0x6f, 0xab, 0x78,
	0x85, 0x0b, 0x7e, 0x86, 0xae, 0xf9, 0x98, 0x58, 0xc5, 0x91, 0xa0, 0x68, 0x1f, 0xea, 0x5a, 0xae,
	0x3f, 0xa5, 0xc1, 0x8b, 0x5c, 0xb5, 0x2d, 0xb9, 0x7e, 0x82, 0xee, 0xef, 0x29, 0x59, 0xb0, 0x59,
	0xb9, 0x72, 0x4e, 0x9f, 0x52, 0xc6, 0x69, 0xe8, 0x5b, 0x87, 0xb6, 0xac, 0xce, 0x60, 0x19, 0x8b,
	0x57, 0x09, 0x8b, 0x23, 0xb2, 0xf0, 0x6b, 0x3a, 0x66, 0x70, 0x70, 0x06, 0xbb, 0x45, 0xa6, 0x75,
	0x59, 0x94, 0xf3, 0x98, 0x9b, 0xb2, 0x14, 0x90, 0xac, 0x60, 0x09, 0x15, 0x79, 0x06, 0x0d, 0x82,
	0x37, 0x16, 0x74, 0x86, 0x34, 0x79, 0x78, 0x34, 0x75, 0x14, 0x32, 0xab, 0x24, 0x43, 0x47, 0xd0,
	0x10, 0x09, 0xa7, 0x64, 0xa9, 0x5f, 0x6f, 0xf7, 0xbb, 0x27, 0x79, 0x4f, 0xae, 0x15, 0x8d, 0x4d,
	0x18, 0x7d, 0x09, 0x4e, 0xc2, 0x96, 0x54, 0x39, 0xd8, 0xee, 0x23, 0x23, 0xbb, 0x61, 0x4b, 0x7a,
	0x45, 0x38, 0x59, 0x0a, 0xac, 0xe2, 0x28, 0x80, 0xfa, 0x33, 0xa3, 0x99, 0xf0, 0x1d, 0x95, 0xaf,
	0x63, 0x84, 0xb7, 0x8c, 0x66, 0x58, 0x87, 0xd0, 0x29, 0x40, 0x48, 0x12, 0x32, 0xe4, 0x64, 0x49,
	0x85, 0x5f, 0x57, 0xc2, 0x3d, 0x23, 0xbc, 0x30, 0x11, 0x5c, 0x12, 0x05, 0xff, 0x5b, 0xe0, 0xea,
	0x92, 0x10, 0x02, 0xa7, 0x34, 0x07, 0xea, 0x19, 0x7d, 0x06, 0x10, 0xd2, 0x19, 0x8b, 0x98, 0x74,
	0x2f, 0xef, 0x4c, 0x89, 0x91, 0x4e, 0xcb, 0x64, 0xb7, 0x84, 0x0b, 0xdf, 0xd5, 0x4e, 0x1b, 0x2c,
	0x9d, 0x49, 0x53, 0x16, 0x0a, 0xdf, 0xd6, 0xce, 0x28, 0x80, 0x4e, 0xa1, 0x4d, 0xe6, 0x73, 0x4e,
	0xe7, 0x44, 0xa5, 0x74, 0x0e, 0xad, 0xa3, 0x6e, 0x7f, 0xd7, 0x14, 0x39, 0x98, 0xcf, 0x87, 0x69,
	0xf4, 0x80, 0xcb, 0x1a, 0x95, 0x28, 0x62, 0x89, 0x3c, 0x91, 0xea, 0x8f, 0x02, 0xc1, 0x7f, 0x35,
	0xd8, 0xc9, 0x3b, 0xf1, 0xde, 0x3e, 0x22, 0x70, 0x64, 0x4f, 0xf2, 0xe2, 0xd5, 0xb3, 0xe4, 0xa4,
	0x63, 0x7e, 0x4b, 0x73, 0xf2, 0x19, 0x7d, 0x0a, 0xad, 0xc2, 0x17, 0x1f, 0x54, 0x60, 0x4d, 0xc8,
	0x83, 0x3e, 0x13, 0xce, 0xc8, 0xfd, 0x82, 0xe6, 0xc3, 0x5e, 0x60, 0x69, 0x12, 0x0b, 0x69, 0x94,
	0xb0, 0x19, 0xa3, 0x5c, 0x9d, 0xa8, 0x85, 0x4b, 0x8c, 0x1a, 0x7b, 0x66, 0x3a, 0x62, 0x63, 0x0d,
	0xd0, 0x01, 0xb8, 0xcf, 0x64, 0x91, 0x52, 0x6d, 0x9c, 0x85, 0x73, 0x24, 0xeb, 0x30, 0x99, 0x85,
	0xdf, 0x50, 0xd6, 0xad, 0x09, 0xf4, 0x39, 0x38, 0x3c, 0xce, 0x84, 0xdf, 0x54, 0xcd, 0x6d, 0x1b,
	0xdf, 0x70, 0x9c, 0x61, 0x15, 0x08, 0x8e, 0xc1, 0xc6, 0x71, 0x86, 0xbe, 0x28, 0xb2, 0x5b, 0x55,
	0xe5, 0x14, 0x8f, 0xcc, 0xa7, 0x82, 0x6f, 0xc1, 0x9e, 0xe2, 0x91, 0xfc, 0xa2, 0x6c, 0xb6, 0x58,
	0x91, 0x07, 0xd3, 0xfd, 0x35, 0x21, 0xab, 0x57, 0xf2, 0xdc, 0x40, 0x0d, 0x82, 0x19, 0xc0, 0x7a,
	0x44, 0xd5, 0x12, 0x24, 0x84, 0x27, 0xc6, 0x79, 0x05, 0x90, 0x07, 0x36, 0x8d, 0xcc, 0xbf, 0x43,
	0x3e, 0xca, 0x33, 0x67, 0x2c, 0x0a, 0xe3, 0x2c, 0xf7, 0x30, 0x47, 0xc8, 0x87, 0x06, 0x59, 0xb0,
	0x79, 0x44, 0x43, 0x65, 0x5f, 0x13, 0x1b, 0x18, 0x5c, 0x81, 0x23, 0x27, 0x7c, 0xeb, 0x70, 0x6e,
	0xdd, 0xd0, 0x8d, 0x91, 0xb5, 0x37, 0x47, 0x36, 0x78, 0x6d, 0x41, 0xab, 0xd8, 0x85, 0xad, 0x79,
	0x37, 0x46, 0xb4, 0xf6, 0x01, 0x23, 0xfa, 0xae, 0x83, 0x21, 0x70, 0xe4, 0xb4, 0xe6, 0x43, 0xa1,
	0x9e, 0x51, 0x1f, 0x40, 0x4d, 0x00, 0xe5, 0xac, 0xd8, 0xd2, 0xca, 0xde, 0xeb, 0x08, 0x2e, 0xa9,
	0xd6, 0xbb, 0xe4, 0x96, 0x76, 0x29, 0xf8, 0x5e, 0x37, 0x21, 0xd7, 0x98, 0xa1, 0xb6, 0x4a, 0x43,
	0x5d, 0xde, 0xcf, 0x5a, 0x75, 0x3f, 0x8f, 0xff, 0xb5, 0xa0, 0x91, 0x1f, 0x06, 0xed, 0x83, 0x37,
	0xb8, 0xbc, 0xbc, 0x1b, 0x4e, 0x27, 0xe7, 0x77, 0xa3, 0xc9, 0xed, 0xe0, 0xd7, 0xd1, 0x85, 0xf7,
	0x11, 0xf2, 0xa0, 0x53, 0xb0, 0x78, 0xf0, 0x87, 0x67, 0xa1, 0x3d, 0xd8, 0x29, 0x98, 0xf1, 0x8f,
	0x83, 0x89, 0x57, 0xab, 0x88, 0xc6, 0xa3, 0x89, 0x67, 0x57, 0x99, 0xc1, 0x9f, 0x9e, 0x83, 0x10,
	0x74, 0x0b, 0xe6, 0xfc, 0xb7, 0xe9, 0xe4, 0xc6, 0xab, 0x57, 0x54, 0xd7, 0xd3, 0xb1, 0xe7, 0xf6,
	0x5f, 0x59, 0xe0, 0x8e, 0x95, 0x0d, 0xe8, 0x0c, 0x5a, 0xc5, 0x5d, 0x85, 0x7c, 0x63, 0xce, 0xe6,
	0xf5, 0xd5, 0x3b, 0x28, 0x9a, 0x52, 0xbd, 0x68, 0xbe, 0x83, 0x46, 0xfe, 0x93, 0x47, 0x85, 0xa4,
	0x7a, 0x7f, 0xf4, 0x3e, 0x79, 0xc1, 0xe7, 0xef, 0x7e, 0x03, 0x75, 0xf5, 0x5b, 0x41, 0xfb, 0x46,
	0x51, 0xfe, 0xdf, 0xf7, 0x3e, 0xde, 0x60, 0xf5, 0x5b, 0x5f, 0x59, 0x3f, 0xc0, 0x5f, 0x4d, 0x1d,
	0x59, 0xdd, 0xdf, 0xbb, 0xea, 0xe6, 0xfd, 0xfa, 0x6d, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xf0,
	0x82, 0xbe, 0x89, 0x07, 0x00, 0x00,
}
